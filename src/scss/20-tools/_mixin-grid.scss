

$grid-gutter-width: rem-calc($susy-gutter-width * 2);
$container-maxwidth: rem-calc($site-maxwidth);

// $susy: (
//   columns: $susy-columns,
//   gutter-position: inside-static, //fixed width gutters like bootstrap
//   gutter: $susy-gutter-width/120px
// );


$susy: (
  columns: 12,
  gutters: 1 / 4,
  math: fluid,
  output: float,
  // container: 1140px,
  gutter-position: inside,
  );



/* Base Classes and their mixins */

// Fluid container
@mixin make-container($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);
  @include clearfix();
}



// Row
// Rows contain and clear the floats of your columns.
@mixin make-row($gutter: $grid-gutter-width) {
  @include clearfix();
  margin-left: ($gutter / -2);
  margin-right: ($gutter / -2);
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}

.row {
  @include make-row();
}

.container {
  @include make-container();
  max-width: $container-maxwidth;
}

// common styling applied to any column (class="col-*" in bootstrap)
// /!\ you should not use this directly and see the column mixin
%columnDefaultStyles {
  // box-sizing: border-box;
  position: relative;
  float: left;
  padding-left: $susy-gutter-width;
  padding-right: $susy-gutter-width;
}



// common styling applied to any row (class="row" in bootstrap)
// /!\ you should not use this directly and see the row mixin
%rowDefaultStyles {
  @include break;
  @include susy-clearfix;
  margin-left: -$susy-gutter-width;
  margin-right: -$susy-gutter-width;
}



/// set something to behave as a row (like having a class="row" on your element in a bootstrap project)
@mixin row() {
  @extend %rowDefaultStyles;
}



/// pass a map of [sass-mq compatible breakpoint:column width] to define responsive column sizes
/// this kinda matches bootstrap columns, and allows for more breakpoints if we want
/// Instead of writing `<div class="col-xs-12 col-md-6 col-lg-3">` in your HTML,
/// write `@include column((small: 12, desktop: 6, wide: 3))` in your Sass
@mixin column($widthList) {
  @extend %columnDefaultStyles;
  @each $breakpoint,
  $width in $widthList {
    @if ($breakpoint==small) {
      width: span($width of $susy-columns);
    }
    @else {
      @include mq($from: $breakpoint) {
        width: span($width of $susy-columns);
      }
    }
  }
}

// this is made only to easily test if our code is working correctly when copy/pasting some bootstrap html code
// in the real world this is unnecessary
@mixin make-bootstrap-breakpoint-classes($class) {
  // .col-offset-0 {
  //   margin-left: 0;
  // }

  @for $i from 1 through $susy-columns {
    .col-#{$i}\@#{$class} {
      width: span($i of $susy-columns);
    }
  }
}

@mixin make-bootstrap-classes() {

  $list: ".col-1#{\@}xs, .col-1#{\@}sm, .col-1#{\@}md, .col-1#{\@}lg, .col-1#{\@}xl";

  @for $i from 1 through $susy-columns {
    $list: "#{$list}, .col-#{$i}#{\@}xs, .col-#{$i}#{\@}sm, .col-#{$i}#{\@}md, .col-#{$i}#{\@}lg, .col-#{$i}#{\@}xl";
  }

  #{$list} {
    @extend %columnDefaultStyles;
  }

  // Loop through the breakpoints that should be shown
  @each $mq-breakpoint-name in map-keys($mq-breakpoints) {

    @if ($mq-breakpoint-name == 'xs') {
      @include make-bootstrap-breakpoint-classes(#{$mq-breakpoint-name});
      } @else {
        @include mq($from: $mq-breakpoint-name) {
          @include make-bootstrap-breakpoint-classes(#{$mq-breakpoint-name});
        }
      }
    }
  }



  // this will be called by the generator mixin
  @mixin generate-responsive-grid-offsets($scoped-bp) {
    $bp: if($scoped-bp, \@#{$scoped-bp}, null);
    @for $i from 1 through $susy-columns {
      .col-push-#{$i}#{$bp} {
        left: span($i of $susy-columns);
      }
      .col-pull-#{$i}#{$bp} {
        right: span($i of $susy-columns);
      }
      .col-offset-#{$i}#{$bp} {
        margin-left: span($i of $susy-columns);
      }
    }
  }

@mixin generate-responsive-hide-classes($scoped-bp) {
    $bp: if($scoped-bp, \@#{$scoped-bp}, null);
    .hidden#{$bp} {
        display: none !important;
    }
}


