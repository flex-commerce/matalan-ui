/*------------------------------------*\
  #ARROWS
\*------------------------------------*/

// Mixin for generating solid-colour, pure CSS arrows pointing out from elements.
//
// Pass in mandatory edge, location, and colour information.
// Optionally specify a size (small, medium, large, <value>) and an offset
// (<value>) which moves the arrow in from an edge by <value>.
//
// .simple-usage {
//   @include arrow(top, right, red);
// }
//
// .complex-usage {
//   // Create a 50px yellow arrow that sits 5% in from the top right of a box.
//   @include arrow(top, right, yellow, 50px, 5%);
// }

@mixin arrow($edge, $location, $color, $size: 20px, $offset: 0) {

  // If an offset has been defined, let’s use it.
  @if ($offset != 0) {
    $offset: $offset;
  }

  // Map keyword sizes to actual numbers. Use passed0in value if defined.
  @if ($size == 'small') {
    $size: 10px;
  } @elseif ($size == 'medium') {
    $size: 15px;
  } @elseif ($size == 'large') {
    $size: 20px;
  } @else {
    $size: $size;
  }

  /**
   * Host element styles.
   *
   * 1. Host element needs relative positioning.
   */
  position: relative; /* [1] */

  /**
   * This is where the magic happens. Pure CSS arrows.
   *
   * 1. Ensure it sits above the host element.
   * 2. Use borders to create the arrow effect.
   * 3. Defensively reset a bunch of things so we can have different arrows
   *    across multiple breakpoints. This produces a lot of redundancy *if*
   *    we have multiple responsive arrows, but it’s the most simple and
   *    robust way of managing things. I’d rather have clarity than terseness
   *    in a situation like this.
   */
  &:before {
    content: "";
    position: absolute;
    z-index: 1; /* [1] */
    border: $size solid transparent; /* [2] */
    margin: 0;    /* [3] */
    top:    auto; /* [3] */
    right:  auto; /* [3] */
    bottom: auto; /* [3] */
    left:   auto; /* [3] */

    @if ($edge == 'top') {
      bottom: 100%;
      border-bottom-color: $color;

      @if ($location == 'left') {
        left: $offset;
      }

      @if ($location == 'middle') {
        left: 50%;
        margin-left: -$size;
      }

      @if ($location == 'right') {
        right: $offset;
      }

    }

    @if ($edge == 'right') {
      left: 100%;
      border-left-color: $color;

      @if ($location == 'top') {
        top: $offset;
      }

      @if ($location == 'middle') {
        top: 50%;
        margin-top: -$size;
      }

      @if ($location == 'bottom') {
        bottom: $offset;
      }

    }

    @if ($edge == 'bottom') {
      top: 100%;
      border-top-color: $color;

      @if ($location == 'left') {
        left: $offset;
      }

      @if ($location == 'middle') {
        left: 50%;
        margin-left: -$size;
      }

      @if ($location == 'right') {
        right: $offset;
      }

    }

    @if ($edge == 'left') {
      right: 100%;
      border-right-color: $color;

      @if ($location == 'top') {
        top: $offset;
      }

      @if ($location == 'middle') {
        top: 50%;
        margin-top: -$size;
      }

      @if ($location == 'bottom') {
        bottom: $offset;
      }

    }

  }

}
